package main

import (
	"bufio"
	"fmt"
	"io"
	"net/http"
	"os"
	"path"

	"github.com/dustin/go-humanize"
)

/*Main function to obtain the source URLs*/
func main() {

	// Read from CLI arguments
	if len(os.Args) < 2 {
		panic(`
			Error. Wrong parameters.
			Please specify the paths to the URL list:
			[0] Source path for URLs
			`)
	}
	// The first element, is always the file path
	srcPath := os.Args[1]

	// Open the specified file
	fmt.Println("Reading URL from: " + srcPath)
	file, err := os.Open(srcPath)
	if err != nil {
		panic(err)
	}

	fmt.Println("Starting downloads...")

	// Create a Scanner to read from file
	scanner := bufio.NewScanner(file)

	//Scan advances the Scanner to the next token, returns false when the scan stops
	for scanner.Scan() {

		// Returns the most recent token generated by a call to Scan
		url := scanner.Text()
		filename := path.Base(url)

		err = downloadFile(filename, url)
		if err != nil {
			fmt.Println("Error occurred while downloading: " + url)
			fmt.Println(err)
		}
		fmt.Print("\n")
		fmt.Println("Download complete.")
	}
	// Execute Err() to check if it stopped because of an error, else it will be nil
	err = scanner.Err()
	if err != nil {
		panic(err)
	}

}

/*Function to download a file from URL*/
func downloadFile(filename string, url string) error {

	fmt.Println("Downloading: " + url)

	// Create Downloads folder if it doesn't exist
	if _, err := os.Stat("downloads"); os.IsNotExist(err) {
		os.Mkdir("downloads", 0644)
	}

	// Create file
	file, err := os.OpenFile(path.Join("downloads", filename), os.O_CREATE, 0644)
	if err != nil {
		fmt.Println("Error creating file")
		return err
	}

	defer file.Close()

	// Get the data
	res, err := http.Get(url)
	if err != nil {
		return err
	}

	// Create a pointer to a WriteCounter
	counter := &WriteCounter{}

	// Copy to file
	_, err = io.Copy(file, io.TeeReader(res.Body, counter))
	if err != nil {
		return err
	}

	defer res.Body.Close()

	return nil
}

/*WriteCounter counts the number of bytes written to it*/
type WriteCounter struct {
	Total uint64
}

// Interface so TeeReader can write the progress on each write cycle
func (wc *WriteCounter) Write(p []byte) (int, error) {
	n := len(p)
	wc.Total += uint64(n)
	// Print the bytes in a human readable form (e.g. 100 MB)
	fmt.Printf("\r... %s", humanize.Bytes(wc.Total))
	return n, nil
}
